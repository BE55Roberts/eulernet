<?php
// FILE: trial29.php
// GOAL: To solve the Project Euler Puzzle 26
/* PROBLEM: Distinct Powers
Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
*/

// START
$dbg = false;
$show = false;
$starting = microtime(true);
$first_to_check = 2;
$last_to_check = 5;
$maximum = 5;
$tally = 0;
$count = 0;
$divisors = [];
$amicables = [];
$amicablesums = [];
$final_sum = 0;
$amicable_pairs = '';
$abundant = [];

// HELP:
if ($argc > 1) {

    $options = getopt("a:b:c:de:f:g:hi:j:k:l:m:n:o:p:q:r:st:u:v:w:x:y:z:");

    foreach($options as $option => $value) {
        switch($option) {
            case 'd':
                $dbg = true;
                break;

            case 'n': // Set first number to check
                 $first_to_check = (int)$value;
                 break;

            case 'm': // Set max divisors to look for
                 $maximum = (int)$value;
                 break;

            case 's':
                $show = true;
                break;

            case 'h':
            default:
                echo 'HELP: '.basename(__FILE__).' -d -h -n $min -m $max -s'.PHP_EOL;
                echo 'GOAL: To solve this puzzle at projecteuler.net'.PHP_EOL;
                echo 'PARM: -d indicates we are debugging'.PHP_EOL;
                echo '      -f set $first_to_check number'.PHP_EOL;
                echo '      -h redisplays this Help Screen'.PHP_EOL;
                echo '      -n sets the $min number to check.'.PHP_EOL;
                echo '      -m sets the $max number to check (inclusive).'.PHP_EOL;
                echo '      -s shows all steps involved.'.PHP_EOL;
                echo 'NOTE: Find the value of $max < 1000 for which 1/$max is a '.PHP_EOL;
                echo '      repeating decimal fraction that contains the longest recurring cycle.'.PHP_EOL;
                echo 'EG:   $max = 10 produces 7, since 1/7 is 0.(142857) for 6 digits.'.PHP_EOL;
                echo 'CAVEAT: This uses arbitrary precision arithmetic (bcadd).'.PHP_EOL;
                exit(0);
                break;
        }
    }
}


// Get the Greatest Common Denominator
function gcd($a, $b) {
    return $b ? gcd($b, $a % $b) : $a;
}

// Determine if a given value is a palindrome - i.e. reads same right to left
function is_prime($val = 1) {
    global $dbg;

    $prime = true;
    $lim = sqrt($val);
    $ndx = 2;

    if ($dbg) {
        echo 'Checking is_prime('.$val.')'.PHP_EOL;
    }

    while ( $ndx <= $lim) {
        if ($val % $ndx == 0) {
            $prime = false;
            break;
        } else {
            $ndx++;
        }
    }

    return $prime;
}

// Find the integers that divide evenly into a value
function find_divisors($val = 1) {
    $result = [1];

    for($i=2; $i<$val; $i++) {
        if ($val % $i == 0) {
            $result[] = $i;
        }
    }

    return $result;
}


// Find the triangular sum of a particular number N - i.e. SUM(1..N)
function find_triangular_sum($val = 1) {
    $result = 0;

    for($ndx = 1; $ndx <= $val ; $ndx++) {
        $result += $ndx;
    }
    
    return $result;

}

function find_distinct_powers($base = 2, $largest=5) {
  $result = [];
  for($i=$base; $i<=$largest; $i++) {
      for($j = $base; $j<=$largest; $j++) {
        $result[] = bcpow($i, $j);
      }
  }

  $result = array_unique($result);

  return $result;
}




/////////////////////////////   MAIN   /////////////////////////////
// $starting = microtime(true);
// $first_to_check = 2;
// $maximum = 5;


echo PHP_EOL;
$to_check = $first_to_check;

if ($dbg) {
    echo 'Running amicable numbers '.$first_to_check.' through('.$maximum.')'.PHP_EOL;
}


// Find the Distinct Powers
$distinct_array = find_distinct_powers($first_to_check, $maximum);

echo 'DISTINCE_POWERS['.$first_to_check.', '.$maximum.'] = '.count($distinct_array).PHP_EOL;

# Evaluate timing
$finished = microtime(true);
$elapsed = $finished - $starting;
echo 'TIMING: This job took '.$elapsed.' seconds to run'.$tally.' iterations.'.PHP_EOL;
exit(0);

